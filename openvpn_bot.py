import os
import subprocess
from telegram import Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes
from config import TOKEN, EASYRSA_DIR, OUTPUT_DIR, TA_KEY_PATH, SERVER_IP, ADMIN_ID
from telegram.constants import ParseMode

OVPN_TEMPLATE = """
client
dev tun
proto udp
remote {server_ip} 1194
resolv-retry infinite
nobind
persist-key
persist-tun
remote-cert-tls server
cipher AES-256-CBC
verb 3
<ca>
{ca}
</ca>
<cert>
{cert}
</cert>
<key>
{key}
</key>
<tls-auth>
{ta}
</tls-auth>
key-direction 1
"""

def admin_only(func):
    async def wrapper(update: Update, context: ContextTypes.DEFAULT_TYPE):
        if update.effective_user.id != ADMIN_ID:
            await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
            return
        return await func(update, context)
    return wrapper

@admin_only
async def newclient(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õîÔ∏è –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥–µ.")
        return
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /new clientname")
        return
    clientname = context.args[0]
    await update.message.reply_text(f"–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á–∏ –¥–ª—è {clientname}...")

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–π —á–µ—Ä–µ–∑ easy-rsa
    try:
        subprocess.run(f"cd {EASYRSA_DIR} && EASYRSA_BATCH=1 EASYRSA_REQ_CN={clientname} ./easyrsa gen-req {clientname} nopass", shell=True, check=True)
        subprocess.run(f"cd {EASYRSA_DIR} && echo yes | EASYRSA_BATCH=1 ./easyrsa sign-req client {clientname}", shell=True, check=True)
    except subprocess.CalledProcessError:
        await update.message.reply_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π!")
        return

    # –ü—É—Ç–∏ –∫ —Ñ–∞–π–ª–∞–º
    ca_path = os.path.join(EASYRSA_DIR, "pki", "ca.crt")
    cert_path = os.path.join(EASYRSA_DIR, "pki", "issued", f"{clientname}.crt")
    key_path = os.path.join(EASYRSA_DIR, "pki", "private", f"{clientname}.key")
    ta_path = TA_KEY_PATH

    # –ß—Ç–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    try:
        with open(ca_path) as f: ca = f.read()
        with open(cert_path) as f: cert = f.read()
        with open(key_path) as f: key = f.read()
        with open(ta_path) as f: ta = f.read()
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤: {e}")
        return

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ovpn
    ovpn_content = OVPN_TEMPLATE.format(
        ca=ca, cert=cert, key=key, ta=ta, server_ip=SERVER_IP
    )

    os.makedirs(OUTPUT_DIR, exist_ok=True)
    ovpn_path = os.path.join(OUTPUT_DIR, f"{clientname}.ovpn")
    with open(ovpn_path, "w") as f:
        f.write(ovpn_content)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–∞
    with open(ovpn_path, "rb") as f:
        await update.message.reply_document(f, filename=f"{clientname}.ovpn")

    await update.message.reply_text("–ì–æ—Ç–æ–≤–æ! –ò—Å–ø–æ–ª—å–∑—É–π —ç—Ç–æ—Ç —Ñ–∞–π–ª –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è.")

@admin_only
async def list_clients(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith('.ovpn')]
        if not files:
            await update.message.reply_text("üìÇ –ù–µ—Ç —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤.", parse_mode=ParseMode.HTML)
            return
        msg = "<b>üìÑ –°–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤:</b>\n" + "\n".join(f"‚Ä¢ <code>{f}</code>" for f in files)
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

@admin_only
async def get_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /get <–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞>")
        return
    clientname = context.args[0]
    ovpn_path = os.path.join(OUTPUT_DIR, f"{clientname}.ovpn")
    if not os.path.exists(ovpn_path):
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    with open(ovpn_path, "rb") as f:
        await update.message.reply_document(f, filename=f"{clientname}.ovpn")

@admin_only
async def delete_client(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) != 1:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑—É–π: /delete <–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞>")
        return
    clientname = context.args[0]
    removed = False
    # –£–¥–∞–ª—è–µ–º ovpn
    ovpn_path = os.path.join(OUTPUT_DIR, f"{clientname}.ovpn")
    if os.path.exists(ovpn_path):
        os.remove(ovpn_path)
        removed = True
    # –£–¥–∞–ª—è–µ–º –∫–ª—é—á–∏ –∏ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã
    for path in [
        os.path.join(EASYRSA_DIR, "pki", "issued", f"{clientname}.crt"),
        os.path.join(EASYRSA_DIR, "pki", "private", f"{clientname}.key"),
        os.path.join(EASYRSA_DIR, "pki", "reqs", f"{clientname}.req")
    ]:
        if os.path.exists(path):
            os.remove(path)
            removed = True
    if removed:
        await update.message.reply_text(f"üóë –ö–ª–∏–µ–Ω—Ç <b>{clientname}</b> —É–¥–∞–ª—ë–Ω.", parse_mode=ParseMode.HTML)
    else:
        await update.message.reply_text("‚ùå –¢–∞–∫–æ–π –∫–ª–∏–µ–Ω—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω.")

@admin_only
async def info(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        files = [f for f in os.listdir(OUTPUT_DIR) if f.endswith('.ovpn')]
        count = len(files)
        await update.message.reply_text(f"‚ÑπÔ∏è <b>–ö–ª–∏–µ–Ω—Ç–æ–≤ —Å–æ–∑–¥–∞–Ω–æ:</b> <b>{count}</b>", parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

@admin_only
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = (
        "<b>üõ† –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚ûï /new [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π .ovpn-—Ñ–∞–π–ª\n"
        "üìÑ /list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "üì• /get [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî –ø–æ–ª—É—á–∏—Ç—å .ovpn-—Ñ–∞–π–ª\n"
        "üóë /delete [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚ÑπÔ∏è /info ‚Äî —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
        "üìä /stats ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞ –ø–æ –∫–ª–∏–µ–Ω—Ç–∞–º\n"
        "üü¢ /active ‚Äî —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "üÜò /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
    )
    await update.message.reply_text(msg, parse_mode=ParseMode.HTML)

@admin_only
async def stats(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_path = "/etc/openvpn/openvpn-status.log"
    if not os.path.exists(status_path):
        await update.message.reply_text("–§–∞–π–ª openvpn-status.log –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    stats = []
    try:
        with open(status_path) as f:
            lines = f.readlines()
        found_clients = False
        for line in lines:
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: CLIENT_LIST,CommonName,RealAddress,BytesReceived,BytesSent,ConnectedSince,...
            if line.startswith("CLIENT_LIST"):
                parts = line.strip().split(",")
                cn = parts[1]
                rx = int(parts[3])
                tx = int(parts[4])
                stats.append(f"‚Ä¢ <b>{cn}</b> ‚Äî Rx: {rx/1024/1024:.2f} MB, Tx: {tx/1024/1024:.2f} MB")
                found_clients = True
        if not found_clients:
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏—â–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Common Name,Real Address,...
            for idx, line in enumerate(lines):
                if line.strip().startswith("Common Name,Real Address"):
                    for data_line in lines[idx+1:]:
                        data_line = data_line.strip()
                        if not data_line or "," not in data_line or data_line.startswith("ROUTING TABLE"):
                            break
                        parts = data_line.split(",")
                        if len(parts) >= 5:
                            cn = parts[0]
                            rx = int(parts[2])
                            tx = int(parts[3])
                            stats.append(f"‚Ä¢ <b>{cn}</b> ‚Äî Rx: {rx/1024/1024:.2f} MB, Tx: {tx/1024/1024:.2f} MB")
        if stats:
            msg = "üë§ <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç—Ä–∞—Ñ–∏–∫–∞:</b>\n" + "\n".join(stats)
        else:
            msg = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

@admin_only
async def active(update: Update, context: ContextTypes.DEFAULT_TYPE):
    status_path = "/etc/openvpn/openvpn-status.log"
    if not os.path.exists(status_path):
        await update.message.reply_text("–§–∞–π–ª openvpn-status.log –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return
    users = []
    try:
        with open(status_path) as f:
            lines = f.readlines()
        found_clients = False
        for idx, line in enumerate(lines):
            # –ù–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç: CLIENT_LIST,cn,ip,...
            if line.startswith("CLIENT_LIST"):
                parts = line.strip().split(",")
                cn = parts[1]
                ip = parts[2].split(":")[0]
                since = parts[7] if len(parts) > 7 else "?"
                users.append(f"‚Ä¢ <b>{cn}</b> ‚Äî {ip} ‚Äî —Å {since}")
                found_clients = True
            # –°—Ç–∞—Ä—ã–π —Ñ–æ—Ä–º–∞—Ç: –∏—â–µ–º –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ Common Name,Real Address,...
        if not found_clients:
            # –ù–∞–π—Ç–∏ –∏–Ω–¥–µ–∫—Å —Å—Ç—Ä–æ–∫–∏ —Å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º
            for idx, line in enumerate(lines):
                if line.strip().startswith("Common Name,Real Address"):
                    # –í—Å–µ —Å—Ç—Ä–æ–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –¥–æ –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –∏–ª–∏ –¥—Ä—É–≥–æ–≥–æ —Ä–∞–∑–¥–µ–ª–∞
                    for data_line in lines[idx+1:]:
                        data_line = data_line.strip()
                        if not data_line or "," not in data_line or data_line.startswith("ROUTING TABLE"):
                            break
                        parts = data_line.split(",")
                        if len(parts) >= 5:
                            cn = parts[0]
                            ip = parts[1].split(":")[0]
                            since = parts[4]
                            users.append(f"‚Ä¢ <b>{cn}</b> ‚Äî {ip} ‚Äî —Å {since}")
        if users:
            msg = "üü¢ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:</b>\n" + "\n".join(users)
        else:
            msg = "–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤."
        await update.message.reply_text(msg, parse_mode=ParseMode.HTML)
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞: {e}")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    commands = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ OpenVPN –ë–æ—Ç!</b>\n\n"
        "üõ† <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:</b>\n"
        "‚ûï /new [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π .ovpn-—Ñ–∞–π–ª\n"
        "üìÑ /list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤\n"
        "üì• /get [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî –ø–æ–ª—É—á–∏—Ç—å .ovpn-—Ñ–∞–π–ª\n"
        "üóë /delete [–∏–º—è_–∫–ª–∏–µ–Ω—Ç–∞] ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞\n"
        "‚ÑπÔ∏è /info ‚Äî —Å—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–µ—Ä–∞\n"
        "üÜò /help ‚Äî —Å–ø—Ä–∞–≤–∫–∞\n"
    )
    await update.message.reply_text(commands, parse_mode=ParseMode.HTML)

if __name__ == "__main__":
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("new", newclient))
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("list", list_clients))
    app.add_handler(CommandHandler("get", get_client))
    app.add_handler(CommandHandler("delete", delete_client))
    app.add_handler(CommandHandler("info", info))
    app.add_handler(CommandHandler("help", help_cmd))
    app.add_handler(CommandHandler("stats", stats))
    app.add_handler(CommandHandler("active", active))
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    app.run_polling()
